//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: ZSI
//   Authors: Shadow-Link
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "oot-3d-common.bt"
#include "oot-3d-cmb-data.bt"

typedef struct {
    char    magic[4];
    char    queen[12];
} HEADER <bgcolor=cLtGray>;

//-------------------
// Start file
//-------------------

HEADER header;

if (header.magic != "ZSI") {    Warning("File is not an OOT ZSI. Template stopped.");    return -1;}

typedef struct {
    short collisionMaterial;
    short a;
    short b;
    short c;
    short normalX;
    short normalY;
    short normalZ;
    int unknown;
    short unknown2;
} Z_Collision_Poly;

typedef struct {
    uint offset <format=hex>;
} Z_Offset;

typedef struct {
    short actorNumber;
    Z_Position position;
    short rotationX;
    short rotationY;
    short rotationZ;
    short variable;
} ZSI_Actor;

typedef struct(byte actorCount) {
    ZSI_Actor actors[actorCount];
} ZSI_ActorList <bgcolor=0x00FF00>;

typedef struct {
    char mapName[68];
} ZSI_Map;

typedef struct(byte mapCount) {
    ZSI_Map maps[mapCount];
} ZSI_Maps <bgcolor=0x00FC00>;

typedef struct {
    uint unknown1;
    uint unknown2;

    uint offsetModel1 <format=hex>;
    uint offsetModel2 <format=hex>;
} ZSI_Model_Ptr <bgcolor=0x00FA00>;

typedef struct {
    byte meshType;
    byte meshCount;
    short unknown;
    
    uint meshTypeStartOffset <format=hex>;
    uint meshTypeEndOffset <format=hex>;
} ZSI_Mesh <bgcolor=0x00FA00>;

typedef struct {
    byte roomFrontIndex;
    byte cameraFrontTransition;
    byte roomBackIndex;
    byte cameraBackTransition;

    short actorNumber;
    Z_Position position;
    short rotationY;

    short initVar;
} ZSI_Transition_Actor <bgcolor=0x00F700>;

typedef struct {
    Z_Position boundsMin;
    Z_Position boundsMax;

    short vertexCount;
    short polyCount;
    short polyTypeCount;
    short unknownCount;
    short unknownCount2;
    short padding; // ?
    
    uint vertexOffset <format=hex>;
    uint polyOffset <format=hex>;
    uint polyTypeOffset <format=hex>;
    uint unknownOffset <format=hex>;
    uint unknownOffset2 <format=hex>;
} ZSI_Collision <bgcolor=0x00E000>;

typedef struct {
    short actorNumber;
    Z_Position position;
    Z_Position rotation;
    short initVar;
} ZSI_SpawnPoint <bgcolor=0x006000>;

typedef struct {
    Z_Color_RGB ambientColor;

    Z_Direction light1Direction;
    Z_Color_RGB light1Color;

    Z_Direction light2Direction;
    Z_Color_RGB light2Color;

    Z_Color_RGB fog;

    short blendParams;
    short fogFar;
} ZSI_Lighting <bgcolor=0x003000>;

typedef struct {
    short id;
} ZSI_Object <bgcolor=0x001000>;

typedef struct {
    // TODO: Figure out if this is correct
    byte startPosition;
    byte roomIndex;
} ZSI_Entrance <bgcolor=0x003000>;

typedef struct {
    int unknown1;
    int unknown2;
} ZSI_Collision_Unknown_1 <bgcolor=0x003000>;

typedef struct {
    // Read full command for future parsing
    local int currentOffset = FTell();
    local uint64 fullCommand;
    FSeek(currentOffset);

    byte command <format=hex>;
    byte commandValue;
    ushort unknown;
    uint commandOffset;

    local int offset = FTell();
    FSeek(commandOffset + 0x10);
    switch(command) {
        case 0x0:
            ZSI_SpawnPoint spawnPoints[commandValue];
            break;
        case 0x1:
            ZSI_ActorList actorList(commandValue);
            break;
        case 0x3:
            ZSI_Collision collision;

            FSeek(collision.vertexOffset + 0x10);
            Z_Position vertices[collision.vertexCount];

            FSeek(collision.polyOffset + 0x10);
            Z_Collision_Poly polys[collision.polyCount];

            FSeek(collision.polyTypeOffset + 0x10);
            ZSI_Collision_Unknown_1 collisionUnknown[collision.polyTypeCount];
            
            FSeek(collision.unknownOffset + 0x10);
            ZSI_Collision_Unknown_1 collisionUnknown2[collision.unknownCount];
            break;
        case 0x4:
            ZSI_Maps maps(commandValue);
            break;
        case 0x6:
            ZSI_Entrance entranceList[commandValue];
            break;
        case 0xE:
            ZSI_Transition_Actor actors[commandValue];
            break;
        case 0x18: 
            break;
        case 0x0A:
            ZSI_Mesh mesh;
            
            FSeek(mesh.meshTypeStartOffset + 0x10);
            ZSI_Model_Ptr modelPtr;
            FSeek(modelPtr.offsetModel1 + 0x10);
            CMBFILE cmbFile;
            break;
        case 0x0B:
            ZSI_Object objects[commandValue];
            break;
        case 0x0F:
            ZSI_Lighting lights[commandValue];
            break;
    }
    FSeek(offset);
} COMMAND <bgcolor=0xFF0000, comment=CommandName>;

string CommandName( COMMAND &cmd ){
    switch( cmd.command )     {        case 0x00  : return "Start positions list";        case 0x01  : return "Actor list";        case 0x02  : return "Camera list";        case 0x03  : return "Collision header";
        case 0x04  : return "Room list";        case 0x05  : return "Wind";        case 0x06  : return "Entrance list";        case 0x07  : return "Special object list";        case 0x08  : return "Room behaviour";        case 0x09  : return "Unused";        case 0x0A  : return "Mesh";        case 0x0B  : return "Object list";
        case 0x0C  : return "Unused lighting settings";        case 0x0D  : return "Pathway list";        case 0x0E  : return "Transition actor list";        case 0x0F  : return "Lighting settings";        case 0x10  : return "Time settings";        case 0x11  : return "Skybox settings";        case 0x12  : return "Skybox modifiers";        case 0x13  : return "Exit list";        case 0x14  : return "End marker";        case 0x15  : return "Sound settings";        case 0x16  : return "Sound settings";        case 0x17  : return "Cutscene list";        case 0x18  : return "Alternate header list";        case 0x19  : return "Camera settings and world map";        default : return "unknown command " + cmd.command;    }
}

COMMAND cmd;

while(cmd.command != 0x14) {
    COMMAND cmd;
}