//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "oot-3d-common.bt"

typedef struct {
    char    magic[4];
    uint    size;    uint    version;
    uint    unused;    char    modelName[16];
    uint    vertexCount;
    uint    sklChunkPointer <format=hex>;
    uint    matsChunkPointer <format=hex>;
    uint    texChunkPointer <format=hex>;
    uint    sklmChunkPointer <format=hex>;
    uint    lutsChunkPointer <format=hex>;
    uint    vatrChunkPointer <format=hex>;
    uint    indicesDataPointer <format=hex>;
    uint    textureDataPointer <format=hex>;
} CMBCHUNK <bgcolor=cLtGray>;

typedef struct {
    byte    id;
    byte    unknown;
    short   parentId;
    VECTOR3 scale;
    VECTOR3 rotation;
    VECTOR3 translation;
} BONE <bgcolor=0xFF0000>;

typedef struct {
    char    magic[4];    uint    size;    uint    boneCount;
    uint    unknown;

    struct {    
        local int bone_i = 0;
        for (bone_i = 0; bone_i < sklChunk.boneCount; bone_i++) {
            BONE bone;
        }
    } BONES;
} SKLCHUNK <bgcolor=0x00FF00>;

typedef struct {
    ushort  sepdChunkId;
    ubyte   materialId;
    ubyte   id;
} MESH;

typedef struct {
    char    magic[4];
    uint    size;
    uint    meshCount;
    ushort  unknownCount;
    ushort  idCount;
      
    struct {    
        local int mesh_i = 0;
        for (mesh_i = 0; mesh_i < meshCount; mesh_i++) {
            MESH mesh;
        }
    } MESHES;
} MSHSCHUNK <bgcolor=0x0000FC>;

typedef struct {
    uint offset;
    float scale;
    ushort dataType;
    ushort mode;
    VECTOR4 constant;
} VERTEXLIST_ENTRY <bgcolor=0xAF0000>;

typedef struct {
    char magic[4];
    uint size;
    uint isVisible;
    uint primitiveMode;
    ushort dataType;
    ushort unknown;
    ushort vertexIndicesCount;
    ushort startVertexIndex;
} PRMCHUNK <bgcolor=0x0F0000>;

typedef struct {
    local uint startOffset = FTell();

    char magic[4];
    uint size;
    uint prmChunkCount;
    ushort skinningMode;
    ushort boneIndicesCount;
    uint boneIndicesOffset;
    uint prmChunkOffset;
    
    local uint i = 0;
    for(i = 0; i < prmChunkCount; i++) {
        FSeek(startOffset + prmChunkOffset[i]);
        PRMCHUNK prmChunk;
    }
} PRMSCHUNK <bgcolor=0x5F0000>;

typedef struct {
    local uint startOffset = FTell();
    
    char magic[4];
    uint size;
    ushort prmsChunkCount;
    ushort flags;
    VECTOR3 center;
    VECTOR3 position;
    VERTEXLIST_ENTRY positions;
    VERTEXLIST_ENTRY normals;
    VERTEXLIST_ENTRY colors;
    VERTEXLIST_ENTRY texCoords1;
    VERTEXLIST_ENTRY texCoords2;
    VERTEXLIST_ENTRY texCoords3;
    VERTEXLIST_ENTRY boneIndices;
    VERTEXLIST_ENTRY boneWeights;
    ushort boneDimension;
    ushort generationFlags;
    ushort prmsChunkOffset[prmsChunkCount];

    local uint i = 0;
    for(i = 0; i < prmsChunkCount; i++) {
        FSeek(startOffset + prmsChunkOffset[i]);
        PRMSCHUNK prmsChunk;
    }
} SEPDCHUNK <bgcolor=0xDF0000>;

typedef struct {
    local uint startOffset = FTell();

    char magic[4];
    uint size;
    uint sepdChunkCount;
    uint flags;
    ushort sepdChunkPointers[sepdChunkCount];

    local int i = 0;
    for(i = 0; i < sepdChunkCount; i++) {
        FSeek(startOffset + sepdChunkPointers[i]);
        SEPDCHUNK sepdChunk;
    }
} SHPCHUNK <bgcolor=0xEF0000>;

typedef struct {
    local uint sklmChunkOffset = FTell();

    char magic[4];
    uint size;
    uint mshsChunkPointer;
    uint shpChunkPointer;

    FSeek(sklmChunkOffset + mshsChunkPointer);
    MSHSCHUNK mshsChunk;

    FSeek(sklmChunkOffset + shpChunkPointer);
    SHPCHUNK shpChunk;
} SKLMCHUNK <bgcolor=0x0000FF>;

typedef struct {
    byte unknown[348];
    /*bool isFragmentLightingEnabled;    bool isVertexLightingEnabled;    bool isHemiSphereLightingEnabled;    bool isHemiSphereOcclusionEnabled;    bool isFaceCulling;    bool isPolygonOffsetEnabled;
    ushort polygonOffset;
    uint textureMappersUsed;
    uint textureCoordsUsed;0010	MatTexture[3]	array of 3 textures0058	TextureCoords[3]	array of 3 textures00A0	RGBA	Emission Color00A4	RGBA	Ambient Color00A8	RGBA	Diffuse Color00AC	RGBA	Specular0 Color00B0	RGBA	Specular1 Color00B4	RGBA	Constant0 Color00B8	RGBA	Constant1 Color00BC	RGBA	Constant2 Color00C0	RGBA	Constant3 Color00C4	RGBA	Constant4 Color00C8	RGBA	Constant5 Color00CC	vector4	Buffer Color00DC	u16	Bump Texture00DE	u16	Bump Mode00E0	u16	IsBumpRenormalize00E2	u16	Padding00E4	u16	Layer Config00E6	u16	Padding00E8	u16	Fresnel Selector00EA	bool	IsClampHighLight00EB	bool	IsDistribution0Enabled00EC	bool	IsDistribution1Enabled00ED	bool	IsGeometricFactor0Enabled00EE	bool	IsGeometricFactor1Enabled00EF	bool	IsReflectionEnabled00F0	bool	ReflectanceRSamplerIsAbs00F1	byte	ReflectanceRSamplerIndex00F2	ushort	ReflectanceRSamplerInput00F4	float	ReflectanceRSamplerScale00F8	bool	ReflectanceGSamplerIsAbs00F9	byte	ReflectanceGSamplerIndex00FA	ushort	ReflectanceGSamplerInput00FC	float	ReflectanceGSamplerScale0100	bool	ReflectanceBSamplerIsAbs0101	byte	ReflectanceBSamplerIndex0102	ushort	ReflectanceBSamplerInput0104	float	ReflectanceBSamplerScale0108	bool	Distibution0SamplerIsAbs0109	byte	Distibution0SamplerIndex010A	ushort	Distibution0SamplerInput010C	float	Distibution0SamplerScale0110	bool	Distibution1SamplerIsAbs0111	byte	Distibution1SamplerIndex0112	ushort	Distibution1SamplerInput0114	float	Distibution1SamplerScale0118	bool	Fresnel1SamplerIsAbs0119	byte	Fresnel1SamplerIndex011A	ushort	Fresnel1SamplerInput011C	float	Fresnel1SamplerScale0120	u32	UsedTexEnvStages (Combiner Stages)0124	u16[6]	TexEnvStages Indices (-1 if unused)0130	bool	Alpha Test Enabled0131	u8	Alpha Reference Value0132	u16 (AlphaFunction)	Alpha Function0134	bool	DepthTestEnabled0135	bool	DepthWriteEnabled0136	u16 (DepthFunction)	Depth Test Function0138	u32	BlendMode013C	u16 (BlendingFactorSrc)	Alpha Source Function013E	u16 (BlendingFactorDest)	Alpha Destination Function0140	u32	Alpha Equation0144	u16	Color Source Function0146	u16	Color Destination Function0148	u32	Color Equation0158	Vector4	Blend Color*/
} MATERIAL <bgcolor=0x0000E0>;

typedef struct {
    char magic[4];
    uint size;
    uint materialCount;
    MATERIAL materials[materialCount];
} MATSCHUNK <bgcolor=0x0000FA>;

typedef struct(uint textureDataPointer) {
    uint textureDataSize;
    ushort mipMapCount;
    byte isEtc1;
    byte isCubeMap;
    ushort width;
    ushort height;
    ushort textureColorFormat;
    ushort textureDataType;
    uint textureDataOffset;
    char textureName[16];

    local uint currentOffset = FTell();
    FSeek(textureDataPointer + textureDataOffset);
    byte textureData[textureDataSize];
    FSeek(currentOffset);
} TEXTURE <bgcolor=0xEF0000>;

typedef struct(uint textureDataPointer) {
    char magic[4];
    uint size;
    uint textureCount;
    TEXTURE textures(textureDataPointer)[textureCount];
} TEXCHUNK <bgcolor=0xFF0000>;

typedef struct {
    char magic[4];
    uint size;
    uint lutCount;
    uint unknown;
} LUTSCHUNK <bgcolor=0x00F000>;

typedef struct {
    uint size;
    uint offset;
} VERTEXLISTDATA <bgcolor=0x00F0A0>;

typedef struct {
    local uint startOffset = FTell();

    char magic[4];
    uint size;
    uint maxVertexIndex;
    VERTEXLISTDATA positions;
    VERTEXLISTDATA normals;
    VERTEXLISTDATA colors;
    VERTEXLISTDATA textureCoords0;
    VERTEXLISTDATA textureCoords1;
    VERTEXLISTDATA textureCoords2;
    VERTEXLISTDATA boneIndices;
    VERTEXLISTDATA boneWeights;

    FSeek(startOffset + positions.offset);
    byte positionData[positions.size];

    FSeek(startOffset + normals.offset);
    byte normalData[normals.size];

    FSeek(startOffset + colors.offset);
    byte colorData[colors.size];

    FSeek(startOffset + textureCoords0.offset);
    byte textureCoordData0[textureCoords0.size];

    FSeek(startOffset + textureCoords1.offset);
    byte textureCoordData1[textureCoords1.size];

    FSeek(startOffset + textureCoords2.offset);
    byte textureCoordData2[textureCoords2.size];

    FSeek(startOffset + boneIndices.offset);
    byte boneIndicesData[boneIndices.size];

    FSeek(startOffset + boneWeights.offset);
    byte boneWeightData[boneWeights.size];
    
} VATRCHUNK <bgcolor=0x00F0F0>;

//-------------------
// Start file
//-------------------
typedef struct {
    local uint fileOffset = FTell();
    
    CMBCHUNK cmbChunk;
    
    if (cmbChunk.magic != "cmb ") {        Warning("File is not a CMB. Template stopped.");        return -1;    }
    
    FSeek(cmbChunk.sklChunkPointer + fileOffset);
    SKLCHUNK sklChunk;
    
    FSeek(cmbChunk.matsChunkPointer + fileOffset);
    MATSCHUNK matsChunk;
    
    FSeek(cmbChunk.texChunkPointer + fileOffset);
    TEXCHUNK texChunk(cmbChunk.textureDataPointer);
    
    FSeek(cmbChunk.sklmChunkPointer + fileOffset);
    SKLMCHUNK sklmChunk;
    
    FSeek(cmbChunk.lutsChunkPointer + fileOffset);
    LUTSCHUNK lutsChunk;
    
    FSeek(cmbChunk.vatrChunkPointer + fileOffset);
    VATRCHUNK vatrChunk;
} CMBFILE;